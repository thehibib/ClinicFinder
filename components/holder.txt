import { useState, useEffect, useRef } from 'react';
import { Text, View, Platform } from 'react-native';
import * as Device from 'expo-device';
import * as Notifications from 'expo-notifications';
import Button from './Button.js';


Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: false,
    shouldSetBadge: false,
  }),
});

export default function Noticiation({title, body, data}) {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState(false);
  const notificationListener = useRef();
  const responseListener = useRef();

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));

    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log(response);
    });

    return () => {
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <View>
      <Button
        text="Notification"
        onPress={async () => {
          await schedulePushNotification(title, body, data);
        }}
        color='#aac961'
      />
    </View>
  );
}

async function schedulePushNotification(title, body, data) {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: String(title),
      body: body,
      data: { data: data },
      presentationStyle: 'banner', 
      sound: 'default',
      vibrate: true,
      
    },
    trigger: { seconds: 2 },
  });
}

async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    // Learn more about projectId:
    // https://docs.expo.dev/push-notifications/push-notifications-setup/#configure-projectid
    token = (await Notifications.getExpoPushTokenAsync({ projectId: 'your-project-id' })).data;
    console.log(token);
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}




/////////////////////////////////////////////////////////////////////////////////////////////////////////////




const Start = ({navigation}) => {
  
  return(
    <View style={styles.container}>
      <Button text='Screen 1' onPress={() => navigation.navigate('Beta')} color='#aac961'/>
      <TextBox onChange={(text) => storeDataStr(text, 'data')}/>
      <StatusBar style="auto" />
      <Button text='Data here!' 
        onPress={async () => alert(await getDataStr('data'))} 
        color='#aac961'/>
    </View>
  )
  
}
const ScreenBeta = ({navigation}) => {
  return(
    <View style={styles.container}>
      <Button text='Screen 2' onPress={() => navigation.navigate('Alpha')} color='#aac961'/>
      <StatusBar style="auto" />
      <Button text='ello' onPress={async () => { 
        await schedulePushNotification({
          title:'Clinic A Updates', 
          body:'A is officially open! Tap to learn more', 
          data:'goes here'
        });
      }} color='#aac961'/>
      {/* <Notification title='Clinic A Updates' body='A is officially open! Tap to learn more' data='goes here' /> */}
    </View>
  )



}



 <Button text='hacker man' 
          onPress={async () => alert(await getLocation())}
          color='#aac961'/>
